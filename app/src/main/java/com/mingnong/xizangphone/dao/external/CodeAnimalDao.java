package com.mingnong.xizangphone.dao.external;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.mingnong.xizangphone.dao.CodeAnimal;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.annotation.Keep;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CodeAnimal".
*/
@Keep
public class CodeAnimalDao extends AbstractDao<CodeAnimal, Long> {

    public static final String TABLENAME = "CodeAnimal";

    /**
     * Properties of entity CodeAnimal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CId = new Property(0, Long.class, "cId", true, "CId");
        public final static Property CParent = new Property(1, String.class, "cParent", false, "CPARENT");
        public final static Property CName = new Property(2, String.class, "cName", false, "cName");
        public final static Property ACode = new Property(3, String.class, "aCode", false, "ACode");
        public final static Property TId = new Property(4, String.class, "tId", false, "tId");
        public final static Property FDw = new Property(5, String.class, "fDw", false, "Fdw");
    }


    public CodeAnimalDao(DaoConfig config) {
        super(config);
    }
    
    public CodeAnimalDao(DaoConfig config, DaoSessionExternal daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CodeAnimal\" (" + //
                "\"CId\" INTEGER PRIMARY KEY ," + // 0: cId
                "\"CPARENT\" TEXT," + // 1: cParent
                "\"cName\" TEXT," + // 2: cName
                "\"ACode\" TEXT," + // 3: aCode
                "\"tId\" TEXT," + // 4: tId
                "\"Fdw\" TEXT);"); // 5: fDw
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CodeAnimal\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CodeAnimal entity) {
        stmt.clearBindings();
 
        Long cId = entity.getCId();
        if (cId != null) {
            stmt.bindLong(1, cId);
        }
 
        String cParent = entity.getCParent();
        if (cParent != null) {
            stmt.bindString(2, cParent);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(3, cName);
        }
 
        String aCode = entity.getACode();
        if (aCode != null) {
            stmt.bindString(4, aCode);
        }
 
        String tId = entity.getTId();
        if (tId != null) {
            stmt.bindString(5, tId);
        }
 
        String fDw = entity.getFDw();
        if (fDw != null) {
            stmt.bindString(6, fDw);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CodeAnimal entity) {
        stmt.clearBindings();
 
        Long cId = entity.getCId();
        if (cId != null) {
            stmt.bindLong(1, cId);
        }
 
        String cParent = entity.getCParent();
        if (cParent != null) {
            stmt.bindString(2, cParent);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(3, cName);
        }
 
        String aCode = entity.getACode();
        if (aCode != null) {
            stmt.bindString(4, aCode);
        }
 
        String tId = entity.getTId();
        if (tId != null) {
            stmt.bindString(5, tId);
        }
 
        String fDw = entity.getFDw();
        if (fDw != null) {
            stmt.bindString(6, fDw);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CodeAnimal readEntity(Cursor cursor, int offset) {
        CodeAnimal entity = new CodeAnimal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cParent
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // aCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // fDw
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CodeAnimal entity, int offset) {
        entity.setCId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCParent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setACode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFDw(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CodeAnimal entity, long rowId) {
        entity.setCId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CodeAnimal entity) {
        if(entity != null) {
            return entity.getCId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CodeAnimal entity) {
        return entity.getCId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
