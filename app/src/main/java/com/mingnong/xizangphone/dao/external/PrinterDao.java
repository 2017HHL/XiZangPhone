package com.mingnong.xizangphone.dao.external;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.mingnong.xizangphone.dao.Printer;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.annotation.Keep;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRINTER".
*/
@Keep
public class PrinterDao extends AbstractDao<Printer, Void> {

    public static final String TABLENAME = "PRINTER";

    /**
     * Properties of entity Printer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PrinterNo = new Property(0, String.class, "printerNo", false, "PrinterNo");
        public final static Property PrinterHao = new Property(1, String.class, "printerHao", false, "PrinterHao");
    }


    public PrinterDao(DaoConfig config) {
        super(config);
    }
    
    public PrinterDao(DaoConfig config, DaoSessionExternal daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINTER\" (" + //
                "\"PrinterNo\" TEXT," + // 0: printerNo
                "\"PrinterHao\" TEXT);"); // 1: printerHao
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Printer entity) {
        stmt.clearBindings();
 
        String printerNo = entity.getPrinterNo();
        if (printerNo != null) {
            stmt.bindString(1, printerNo);
        }
 
        String printerHao = entity.getPrinterHao();
        if (printerHao != null) {
            stmt.bindString(2, printerHao);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Printer entity) {
        stmt.clearBindings();
 
        String printerNo = entity.getPrinterNo();
        if (printerNo != null) {
            stmt.bindString(1, printerNo);
        }
 
        String printerHao = entity.getPrinterHao();
        if (printerHao != null) {
            stmt.bindString(2, printerHao);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Printer readEntity(Cursor cursor, int offset) {
        Printer entity = new Printer( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // printerNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // printerHao
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Printer entity, int offset) {
        entity.setPrinterNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPrinterHao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Printer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Printer entity) {
        return null;
    }

    @Override
    public boolean hasKey(Printer entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
