package com.mingnong.xizangphone.dao.local;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 11): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 11;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        AnimalApplyBeanDao.createTable(db, ifNotExists);
        Animal_ADao.createTable(db, ifNotExists);
        Animal_BDao.createTable(db, ifNotExists);
        CacheTableDao.createTable(db, ifNotExists);
        CodeXDDao.createTable(db, ifNotExists);
        ProductApplyBeanDao.createTable(db, ifNotExists);
        Product_ADao.createTable(db, ifNotExists);
        Product_BDao.createTable(db, ifNotExists);
        ShenShiXianBeanDao.createTable(db, ifNotExists);
        StoreAnimalADao.createTable(db, ifNotExists);
        StoreAnimalBDao.createTable(db, ifNotExists);
        StoreAnimApplyBeanDao.createTable(db, ifNotExists);
        StoreProductADao.createTable(db, ifNotExists);
        StoreProductApplyBeanDao.createTable(db, ifNotExists);
        StoreProductBDao.createTable(db, ifNotExists);
        UnitDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        XiaoXiDaoBeanDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        AnimalApplyBeanDao.dropTable(db, ifExists);
        Animal_ADao.dropTable(db, ifExists);
        Animal_BDao.dropTable(db, ifExists);
        CacheTableDao.dropTable(db, ifExists);
        CodeXDDao.dropTable(db, ifExists);
        ProductApplyBeanDao.dropTable(db, ifExists);
        Product_ADao.dropTable(db, ifExists);
        Product_BDao.dropTable(db, ifExists);
        ShenShiXianBeanDao.dropTable(db, ifExists);
        StoreAnimalADao.dropTable(db, ifExists);
        StoreAnimalBDao.dropTable(db, ifExists);
        StoreAnimApplyBeanDao.dropTable(db, ifExists);
        StoreProductADao.dropTable(db, ifExists);
        StoreProductApplyBeanDao.dropTable(db, ifExists);
        StoreProductBDao.dropTable(db, ifExists);
        UnitDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        XiaoXiDaoBeanDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AnimalApplyBeanDao.class);
        registerDaoClass(Animal_ADao.class);
        registerDaoClass(Animal_BDao.class);
        registerDaoClass(CacheTableDao.class);
        registerDaoClass(CodeXDDao.class);
        registerDaoClass(ProductApplyBeanDao.class);
        registerDaoClass(Product_ADao.class);
        registerDaoClass(Product_BDao.class);
        registerDaoClass(ShenShiXianBeanDao.class);
        registerDaoClass(StoreAnimalADao.class);
        registerDaoClass(StoreAnimalBDao.class);
        registerDaoClass(StoreAnimApplyBeanDao.class);
        registerDaoClass(StoreProductADao.class);
        registerDaoClass(StoreProductApplyBeanDao.class);
        registerDaoClass(StoreProductBDao.class);
        registerDaoClass(UnitDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(XiaoXiDaoBeanDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
