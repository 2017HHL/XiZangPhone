package com.mingnong.xizangphone.dao.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mingnong.xizangphone.dao.ProductApplyBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ProductApplyBean".
*/
public class ProductApplyBeanDao extends AbstractDao<ProductApplyBean, Long> {

    public static final String TABLENAME = "ProductApplyBean";

    /**
     * Properties of entity ProductApplyBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FStId = new Property(1, String.class, "FStId", false, "FST_ID");
        public final static Property QCPType = new Property(2, String.class, "QCPType", false, "QCPTYPE");
        public final static Property QCPNumber = new Property(3, String.class, "QCPNumber", false, "QCPNUMBER");
        public final static Property FGlid = new Property(4, String.class, "FGlid", false, "FGLID");
        public final static Property FTZGlid = new Property(5, int.class, "FTZGlid", false, "FTZGLID");
        public final static Property QCPCargoOwner = new Property(6, String.class, "QCPCargoOwner", false, "QCPCARGO_OWNER");
        public final static Property QCPPhone = new Property(7, String.class, "QCPPhone", false, "QCPPHONE");
        public final static Property QCProduct = new Property(8, String.class, "QCProduct", false, "QCPRODUCT");
        public final static Property QCProductOne = new Property(9, String.class, "QCProductOne", false, "QCPRODUCT_ONE");
        public final static Property QCProductTwo = new Property(10, String.class, "QCProductTwo", false, "QCPRODUCT_TWO");
        public final static Property QCProductThree = new Property(11, String.class, "QCProductThree", false, "QCPRODUCT_THREE");
        public final static Property QCPQuantity = new Property(12, Double.class, "QCPQuantity", false, "QCPQUANTITY");
        public final static Property QCPDanWei = new Property(13, String.class, "QCPDanWei", false, "QCPDAN_WEI");
        public final static Property QCPsource = new Property(14, String.class, "QCPsource", false, "QCPSOURCE");
        public final static Property QCPShengQy = new Property(15, String.class, "QCPShengQy", false, "QCPSHENG_QY");
        public final static Property QCPShiQy = new Property(16, String.class, "QCPShiQy", false, "QCPSHI_QY");
        public final static Property QCPXianQy = new Property(17, String.class, "QCPXianQy", false, "QCPXIAN_QY");
        public final static Property QCPDiZhiQy = new Property(18, String.class, "QCPDiZhiQy", false, "QCPDI_ZHI_QY");
        public final static Property QCPShengDd = new Property(19, String.class, "QCPShengDd", false, "QCPSHENG_DD");
        public final static Property QCPShiDd = new Property(20, String.class, "QCPShiDd", false, "QCPSHI_DD");
        public final static Property QCPXianDd = new Property(21, String.class, "QCPXianDd", false, "QCPXIAN_DD");
        public final static Property QCPDiZhiDd = new Property(22, String.class, "QCPDiZhiDd", false, "QCPDI_ZHI_DD");
        public final static Property QCPChengYunRen = new Property(23, String.class, "QCPChengYunRen", false, "QCPCHENG_YUN_REN");
        public final static Property QCPCyrDianHua = new Property(24, String.class, "QCPCyrDianHua", false, "QCPCYR_DIAN_HUA");
        public final static Property QCPYunZai = new Property(25, String.class, "QCPYunZai", false, "QCPYUN_ZAI");
        public final static Property QCPTrademark = new Property(26, String.class, "QCPTrademark", false, "QCPTRADEMARK");
        public final static Property QCPDisinfection = new Property(27, String.class, "QCPDisinfection", false, "QCPDISINFECTION");
        public final static Property DateQy = new Property(28, String.class, "DateQy", false, "DATE_QY");
        public final static Property DateQF = new Property(29, String.class, "DateQF", false, "DATE_QF");
        public final static Property Highway = new Property(30, String.class, "Highway", false, "HIGHWAY");
        public final static Property Railway = new Property(31, String.class, "Railway", false, "RAILWAY");
        public final static Property Waterway = new Property(32, String.class, "Waterway", false, "WATERWAY");
        public final static Property Aviation = new Property(33, String.class, "Aviation", false, "AVIATION");
        public final static Property FSmemo1 = new Property(34, String.class, "FSmemo1", false, "FSMEMO1");
        public final static Property QCPAccepted = new Property(35, String.class, "QCPAccepted", false, "QCPACCEPTED");
        public final static Property QCPAddress = new Property(36, String.class, "QCPAddress", false, "QCPADDRESS");
        public final static Property DateNpy = new Property(37, String.class, "DateNpy", false, "DATE_NPY");
        public final static Property QCPLiYou = new Property(38, String.class, "QCPLiYou", false, "QCPLI_YOU");
        public final static Property QCPAttn = new Property(39, String.class, "QCPAttn", false, "QCPATTN");
        public final static Property QCPJBRDianHua = new Property(40, String.class, "QCPJBRDianHua", false, "QCPJBRDIAN_HUA");
        public final static Property DateJL = new Property(41, String.class, "DateJL", false, "DATE_JL");
        public final static Property IsPrant = new Property(42, String.class, "IsPrant", false, "IS_PRANT");
        public final static Property Remarks = new Property(43, String.class, "Remarks", false, "REMARKS");
        public final static Property QResults = new Property(44, String.class, "QResults", false, "QRESULTS");
        public final static Property FSuserName = new Property(45, String.class, "FSuserName", false, "FSUSER_NAME");
    }


    public ProductApplyBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ProductApplyBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ProductApplyBean\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FST_ID\" TEXT," + // 1: FStId
                "\"QCPTYPE\" TEXT," + // 2: QCPType
                "\"QCPNUMBER\" TEXT," + // 3: QCPNumber
                "\"FGLID\" TEXT," + // 4: FGlid
                "\"FTZGLID\" INTEGER NOT NULL ," + // 5: FTZGlid
                "\"QCPCARGO_OWNER\" TEXT," + // 6: QCPCargoOwner
                "\"QCPPHONE\" TEXT," + // 7: QCPPhone
                "\"QCPRODUCT\" TEXT," + // 8: QCProduct
                "\"QCPRODUCT_ONE\" TEXT," + // 9: QCProductOne
                "\"QCPRODUCT_TWO\" TEXT," + // 10: QCProductTwo
                "\"QCPRODUCT_THREE\" TEXT," + // 11: QCProductThree
                "\"QCPQUANTITY\" REAL," + // 12: QCPQuantity
                "\"QCPDAN_WEI\" TEXT," + // 13: QCPDanWei
                "\"QCPSOURCE\" TEXT," + // 14: QCPsource
                "\"QCPSHENG_QY\" TEXT," + // 15: QCPShengQy
                "\"QCPSHI_QY\" TEXT," + // 16: QCPShiQy
                "\"QCPXIAN_QY\" TEXT," + // 17: QCPXianQy
                "\"QCPDI_ZHI_QY\" TEXT," + // 18: QCPDiZhiQy
                "\"QCPSHENG_DD\" TEXT," + // 19: QCPShengDd
                "\"QCPSHI_DD\" TEXT," + // 20: QCPShiDd
                "\"QCPXIAN_DD\" TEXT," + // 21: QCPXianDd
                "\"QCPDI_ZHI_DD\" TEXT," + // 22: QCPDiZhiDd
                "\"QCPCHENG_YUN_REN\" TEXT," + // 23: QCPChengYunRen
                "\"QCPCYR_DIAN_HUA\" TEXT," + // 24: QCPCyrDianHua
                "\"QCPYUN_ZAI\" TEXT," + // 25: QCPYunZai
                "\"QCPTRADEMARK\" TEXT," + // 26: QCPTrademark
                "\"QCPDISINFECTION\" TEXT," + // 27: QCPDisinfection
                "\"DATE_QY\" TEXT," + // 28: DateQy
                "\"DATE_QF\" TEXT," + // 29: DateQF
                "\"HIGHWAY\" TEXT," + // 30: Highway
                "\"RAILWAY\" TEXT," + // 31: Railway
                "\"WATERWAY\" TEXT," + // 32: Waterway
                "\"AVIATION\" TEXT," + // 33: Aviation
                "\"FSMEMO1\" TEXT," + // 34: FSmemo1
                "\"QCPACCEPTED\" TEXT," + // 35: QCPAccepted
                "\"QCPADDRESS\" TEXT," + // 36: QCPAddress
                "\"DATE_NPY\" TEXT," + // 37: DateNpy
                "\"QCPLI_YOU\" TEXT," + // 38: QCPLiYou
                "\"QCPATTN\" TEXT," + // 39: QCPAttn
                "\"QCPJBRDIAN_HUA\" TEXT," + // 40: QCPJBRDianHua
                "\"DATE_JL\" TEXT," + // 41: DateJL
                "\"IS_PRANT\" TEXT," + // 42: IsPrant
                "\"REMARKS\" TEXT," + // 43: Remarks
                "\"QRESULTS\" TEXT," + // 44: QResults
                "\"FSUSER_NAME\" TEXT);"); // 45: FSuserName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ProductApplyBean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductApplyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FStId = entity.getFStId();
        if (FStId != null) {
            stmt.bindString(2, FStId);
        }
 
        String QCPType = entity.getQCPType();
        if (QCPType != null) {
            stmt.bindString(3, QCPType);
        }
 
        String QCPNumber = entity.getQCPNumber();
        if (QCPNumber != null) {
            stmt.bindString(4, QCPNumber);
        }
 
        String FGlid = entity.getFGlid();
        if (FGlid != null) {
            stmt.bindString(5, FGlid);
        }
        stmt.bindLong(6, entity.getFTZGlid());
 
        String QCPCargoOwner = entity.getQCPCargoOwner();
        if (QCPCargoOwner != null) {
            stmt.bindString(7, QCPCargoOwner);
        }
 
        String QCPPhone = entity.getQCPPhone();
        if (QCPPhone != null) {
            stmt.bindString(8, QCPPhone);
        }
 
        String QCProduct = entity.getQCProduct();
        if (QCProduct != null) {
            stmt.bindString(9, QCProduct);
        }
 
        String QCProductOne = entity.getQCProductOne();
        if (QCProductOne != null) {
            stmt.bindString(10, QCProductOne);
        }
 
        String QCProductTwo = entity.getQCProductTwo();
        if (QCProductTwo != null) {
            stmt.bindString(11, QCProductTwo);
        }
 
        String QCProductThree = entity.getQCProductThree();
        if (QCProductThree != null) {
            stmt.bindString(12, QCProductThree);
        }
 
        Double QCPQuantity = entity.getQCPQuantity();
        if (QCPQuantity != null) {
            stmt.bindDouble(13, QCPQuantity);
        }
 
        String QCPDanWei = entity.getQCPDanWei();
        if (QCPDanWei != null) {
            stmt.bindString(14, QCPDanWei);
        }
 
        String QCPsource = entity.getQCPsource();
        if (QCPsource != null) {
            stmt.bindString(15, QCPsource);
        }
 
        String QCPShengQy = entity.getQCPShengQy();
        if (QCPShengQy != null) {
            stmt.bindString(16, QCPShengQy);
        }
 
        String QCPShiQy = entity.getQCPShiQy();
        if (QCPShiQy != null) {
            stmt.bindString(17, QCPShiQy);
        }
 
        String QCPXianQy = entity.getQCPXianQy();
        if (QCPXianQy != null) {
            stmt.bindString(18, QCPXianQy);
        }
 
        String QCPDiZhiQy = entity.getQCPDiZhiQy();
        if (QCPDiZhiQy != null) {
            stmt.bindString(19, QCPDiZhiQy);
        }
 
        String QCPShengDd = entity.getQCPShengDd();
        if (QCPShengDd != null) {
            stmt.bindString(20, QCPShengDd);
        }
 
        String QCPShiDd = entity.getQCPShiDd();
        if (QCPShiDd != null) {
            stmt.bindString(21, QCPShiDd);
        }
 
        String QCPXianDd = entity.getQCPXianDd();
        if (QCPXianDd != null) {
            stmt.bindString(22, QCPXianDd);
        }
 
        String QCPDiZhiDd = entity.getQCPDiZhiDd();
        if (QCPDiZhiDd != null) {
            stmt.bindString(23, QCPDiZhiDd);
        }
 
        String QCPChengYunRen = entity.getQCPChengYunRen();
        if (QCPChengYunRen != null) {
            stmt.bindString(24, QCPChengYunRen);
        }
 
        String QCPCyrDianHua = entity.getQCPCyrDianHua();
        if (QCPCyrDianHua != null) {
            stmt.bindString(25, QCPCyrDianHua);
        }
 
        String QCPYunZai = entity.getQCPYunZai();
        if (QCPYunZai != null) {
            stmt.bindString(26, QCPYunZai);
        }
 
        String QCPTrademark = entity.getQCPTrademark();
        if (QCPTrademark != null) {
            stmt.bindString(27, QCPTrademark);
        }
 
        String QCPDisinfection = entity.getQCPDisinfection();
        if (QCPDisinfection != null) {
            stmt.bindString(28, QCPDisinfection);
        }
 
        String DateQy = entity.getDateQy();
        if (DateQy != null) {
            stmt.bindString(29, DateQy);
        }
 
        String DateQF = entity.getDateQF();
        if (DateQF != null) {
            stmt.bindString(30, DateQF);
        }
 
        String Highway = entity.getHighway();
        if (Highway != null) {
            stmt.bindString(31, Highway);
        }
 
        String Railway = entity.getRailway();
        if (Railway != null) {
            stmt.bindString(32, Railway);
        }
 
        String Waterway = entity.getWaterway();
        if (Waterway != null) {
            stmt.bindString(33, Waterway);
        }
 
        String Aviation = entity.getAviation();
        if (Aviation != null) {
            stmt.bindString(34, Aviation);
        }
 
        String FSmemo1 = entity.getFSmemo1();
        if (FSmemo1 != null) {
            stmt.bindString(35, FSmemo1);
        }
 
        String QCPAccepted = entity.getQCPAccepted();
        if (QCPAccepted != null) {
            stmt.bindString(36, QCPAccepted);
        }
 
        String QCPAddress = entity.getQCPAddress();
        if (QCPAddress != null) {
            stmt.bindString(37, QCPAddress);
        }
 
        String DateNpy = entity.getDateNpy();
        if (DateNpy != null) {
            stmt.bindString(38, DateNpy);
        }
 
        String QCPLiYou = entity.getQCPLiYou();
        if (QCPLiYou != null) {
            stmt.bindString(39, QCPLiYou);
        }
 
        String QCPAttn = entity.getQCPAttn();
        if (QCPAttn != null) {
            stmt.bindString(40, QCPAttn);
        }
 
        String QCPJBRDianHua = entity.getQCPJBRDianHua();
        if (QCPJBRDianHua != null) {
            stmt.bindString(41, QCPJBRDianHua);
        }
 
        String DateJL = entity.getDateJL();
        if (DateJL != null) {
            stmt.bindString(42, DateJL);
        }
 
        String IsPrant = entity.getIsPrant();
        if (IsPrant != null) {
            stmt.bindString(43, IsPrant);
        }
 
        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(44, Remarks);
        }
 
        String QResults = entity.getQResults();
        if (QResults != null) {
            stmt.bindString(45, QResults);
        }
 
        String FSuserName = entity.getFSuserName();
        if (FSuserName != null) {
            stmt.bindString(46, FSuserName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductApplyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FStId = entity.getFStId();
        if (FStId != null) {
            stmt.bindString(2, FStId);
        }
 
        String QCPType = entity.getQCPType();
        if (QCPType != null) {
            stmt.bindString(3, QCPType);
        }
 
        String QCPNumber = entity.getQCPNumber();
        if (QCPNumber != null) {
            stmt.bindString(4, QCPNumber);
        }
 
        String FGlid = entity.getFGlid();
        if (FGlid != null) {
            stmt.bindString(5, FGlid);
        }
        stmt.bindLong(6, entity.getFTZGlid());
 
        String QCPCargoOwner = entity.getQCPCargoOwner();
        if (QCPCargoOwner != null) {
            stmt.bindString(7, QCPCargoOwner);
        }
 
        String QCPPhone = entity.getQCPPhone();
        if (QCPPhone != null) {
            stmt.bindString(8, QCPPhone);
        }
 
        String QCProduct = entity.getQCProduct();
        if (QCProduct != null) {
            stmt.bindString(9, QCProduct);
        }
 
        String QCProductOne = entity.getQCProductOne();
        if (QCProductOne != null) {
            stmt.bindString(10, QCProductOne);
        }
 
        String QCProductTwo = entity.getQCProductTwo();
        if (QCProductTwo != null) {
            stmt.bindString(11, QCProductTwo);
        }
 
        String QCProductThree = entity.getQCProductThree();
        if (QCProductThree != null) {
            stmt.bindString(12, QCProductThree);
        }
 
        Double QCPQuantity = entity.getQCPQuantity();
        if (QCPQuantity != null) {
            stmt.bindDouble(13, QCPQuantity);
        }
 
        String QCPDanWei = entity.getQCPDanWei();
        if (QCPDanWei != null) {
            stmt.bindString(14, QCPDanWei);
        }
 
        String QCPsource = entity.getQCPsource();
        if (QCPsource != null) {
            stmt.bindString(15, QCPsource);
        }
 
        String QCPShengQy = entity.getQCPShengQy();
        if (QCPShengQy != null) {
            stmt.bindString(16, QCPShengQy);
        }
 
        String QCPShiQy = entity.getQCPShiQy();
        if (QCPShiQy != null) {
            stmt.bindString(17, QCPShiQy);
        }
 
        String QCPXianQy = entity.getQCPXianQy();
        if (QCPXianQy != null) {
            stmt.bindString(18, QCPXianQy);
        }
 
        String QCPDiZhiQy = entity.getQCPDiZhiQy();
        if (QCPDiZhiQy != null) {
            stmt.bindString(19, QCPDiZhiQy);
        }
 
        String QCPShengDd = entity.getQCPShengDd();
        if (QCPShengDd != null) {
            stmt.bindString(20, QCPShengDd);
        }
 
        String QCPShiDd = entity.getQCPShiDd();
        if (QCPShiDd != null) {
            stmt.bindString(21, QCPShiDd);
        }
 
        String QCPXianDd = entity.getQCPXianDd();
        if (QCPXianDd != null) {
            stmt.bindString(22, QCPXianDd);
        }
 
        String QCPDiZhiDd = entity.getQCPDiZhiDd();
        if (QCPDiZhiDd != null) {
            stmt.bindString(23, QCPDiZhiDd);
        }
 
        String QCPChengYunRen = entity.getQCPChengYunRen();
        if (QCPChengYunRen != null) {
            stmt.bindString(24, QCPChengYunRen);
        }
 
        String QCPCyrDianHua = entity.getQCPCyrDianHua();
        if (QCPCyrDianHua != null) {
            stmt.bindString(25, QCPCyrDianHua);
        }
 
        String QCPYunZai = entity.getQCPYunZai();
        if (QCPYunZai != null) {
            stmt.bindString(26, QCPYunZai);
        }
 
        String QCPTrademark = entity.getQCPTrademark();
        if (QCPTrademark != null) {
            stmt.bindString(27, QCPTrademark);
        }
 
        String QCPDisinfection = entity.getQCPDisinfection();
        if (QCPDisinfection != null) {
            stmt.bindString(28, QCPDisinfection);
        }
 
        String DateQy = entity.getDateQy();
        if (DateQy != null) {
            stmt.bindString(29, DateQy);
        }
 
        String DateQF = entity.getDateQF();
        if (DateQF != null) {
            stmt.bindString(30, DateQF);
        }
 
        String Highway = entity.getHighway();
        if (Highway != null) {
            stmt.bindString(31, Highway);
        }
 
        String Railway = entity.getRailway();
        if (Railway != null) {
            stmt.bindString(32, Railway);
        }
 
        String Waterway = entity.getWaterway();
        if (Waterway != null) {
            stmt.bindString(33, Waterway);
        }
 
        String Aviation = entity.getAviation();
        if (Aviation != null) {
            stmt.bindString(34, Aviation);
        }
 
        String FSmemo1 = entity.getFSmemo1();
        if (FSmemo1 != null) {
            stmt.bindString(35, FSmemo1);
        }
 
        String QCPAccepted = entity.getQCPAccepted();
        if (QCPAccepted != null) {
            stmt.bindString(36, QCPAccepted);
        }
 
        String QCPAddress = entity.getQCPAddress();
        if (QCPAddress != null) {
            stmt.bindString(37, QCPAddress);
        }
 
        String DateNpy = entity.getDateNpy();
        if (DateNpy != null) {
            stmt.bindString(38, DateNpy);
        }
 
        String QCPLiYou = entity.getQCPLiYou();
        if (QCPLiYou != null) {
            stmt.bindString(39, QCPLiYou);
        }
 
        String QCPAttn = entity.getQCPAttn();
        if (QCPAttn != null) {
            stmt.bindString(40, QCPAttn);
        }
 
        String QCPJBRDianHua = entity.getQCPJBRDianHua();
        if (QCPJBRDianHua != null) {
            stmt.bindString(41, QCPJBRDianHua);
        }
 
        String DateJL = entity.getDateJL();
        if (DateJL != null) {
            stmt.bindString(42, DateJL);
        }
 
        String IsPrant = entity.getIsPrant();
        if (IsPrant != null) {
            stmt.bindString(43, IsPrant);
        }
 
        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(44, Remarks);
        }
 
        String QResults = entity.getQResults();
        if (QResults != null) {
            stmt.bindString(45, QResults);
        }
 
        String FSuserName = entity.getFSuserName();
        if (FSuserName != null) {
            stmt.bindString(46, FSuserName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductApplyBean readEntity(Cursor cursor, int offset) {
        ProductApplyBean entity = new ProductApplyBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FStId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // QCPType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // QCPNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FGlid
            cursor.getInt(offset + 5), // FTZGlid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // QCPCargoOwner
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // QCPPhone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // QCProduct
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // QCProductOne
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // QCProductTwo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // QCProductThree
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // QCPQuantity
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // QCPDanWei
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // QCPsource
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // QCPShengQy
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // QCPShiQy
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // QCPXianQy
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // QCPDiZhiQy
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // QCPShengDd
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // QCPShiDd
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // QCPXianDd
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // QCPDiZhiDd
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // QCPChengYunRen
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // QCPCyrDianHua
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // QCPYunZai
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // QCPTrademark
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // QCPDisinfection
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // DateQy
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // DateQF
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // Highway
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // Railway
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // Waterway
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // Aviation
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // FSmemo1
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // QCPAccepted
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // QCPAddress
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // DateNpy
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // QCPLiYou
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // QCPAttn
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // QCPJBRDianHua
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // DateJL
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // IsPrant
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // Remarks
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // QResults
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45) // FSuserName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductApplyBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFStId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQCPType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQCPNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFGlid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFTZGlid(cursor.getInt(offset + 5));
        entity.setQCPCargoOwner(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQCPPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQCProduct(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQCProductOne(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setQCProductTwo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQCProductThree(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setQCPQuantity(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setQCPDanWei(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setQCPsource(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setQCPShengQy(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setQCPShiQy(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setQCPXianQy(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setQCPDiZhiQy(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setQCPShengDd(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setQCPShiDd(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setQCPXianDd(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setQCPDiZhiDd(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setQCPChengYunRen(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setQCPCyrDianHua(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setQCPYunZai(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setQCPTrademark(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setQCPDisinfection(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setDateQy(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setDateQF(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setHighway(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRailway(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setWaterway(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setAviation(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setFSmemo1(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setQCPAccepted(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setQCPAddress(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setDateNpy(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setQCPLiYou(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setQCPAttn(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setQCPJBRDianHua(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setDateJL(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setIsPrant(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setRemarks(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setQResults(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setFSuserName(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductApplyBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductApplyBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductApplyBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
