package com.mingnong.xizangphone.dao.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mingnong.xizangphone.dao.ShenShiXianBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHEN_SHI_XIAN_BEAN".
*/
public class ShenShiXianBeanDao extends AbstractDao<ShenShiXianBean, Long> {

    public static final String TABLENAME = "SHEN_SHI_XIAN_BEAN";

    /**
     * Properties of entity ShenShiXianBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tid = new Property(1, String.class, "tid", false, "Tid");
        public final static Property Uname = new Property(2, String.class, "uname", false, "Uname");
        public final static Property Utype = new Property(3, String.class, "utype", false, "Utype");
        public final static Property Uparent = new Property(4, String.class, "uparent", false, "Uparent");
    }


    public ShenShiXianBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShenShiXianBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHEN_SHI_XIAN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"Tid\" TEXT," + // 1: tid
                "\"Uname\" TEXT," + // 2: uname
                "\"Utype\" TEXT," + // 3: utype
                "\"Uparent\" TEXT);"); // 4: uparent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHEN_SHI_XIAN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShenShiXianBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(3, uname);
        }
 
        String utype = entity.getUtype();
        if (utype != null) {
            stmt.bindString(4, utype);
        }
 
        String uparent = entity.getUparent();
        if (uparent != null) {
            stmt.bindString(5, uparent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShenShiXianBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(3, uname);
        }
 
        String utype = entity.getUtype();
        if (utype != null) {
            stmt.bindString(4, utype);
        }
 
        String uparent = entity.getUparent();
        if (uparent != null) {
            stmt.bindString(5, uparent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShenShiXianBean readEntity(Cursor cursor, int offset) {
        ShenShiXianBean entity = new ShenShiXianBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // utype
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // uparent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShenShiXianBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUtype(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUparent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShenShiXianBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShenShiXianBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShenShiXianBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
