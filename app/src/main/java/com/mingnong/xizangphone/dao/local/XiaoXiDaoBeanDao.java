package com.mingnong.xizangphone.dao.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mingnong.xizangphone.dao.XiaoXiDaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XIAO_XI_DAO_BEAN".
*/
public class XiaoXiDaoBeanDao extends AbstractDao<XiaoXiDaoBean, Long> {

    public static final String TABLENAME = "XIAO_XI_DAO_BEAN";

    /**
     * Properties of entity XiaoXiDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tid = new Property(1, String.class, "tid", false, "Tid");
        public final static Property CidTongZhiName = new Property(2, String.class, "CidTongZhiName", false, "CidTongZhiName");
        public final static Property Ism = new Property(3, String.class, "ism", false, "Ism");
        public final static Property FileNameList = new Property(4, String.class, "fileNameList", false, "FileNameList");
        public final static Property UrlList = new Property(5, String.class, "urlList", false, "UrlList");
    }


    public XiaoXiDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public XiaoXiDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XIAO_XI_DAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"Tid\" TEXT," + // 1: tid
                "\"CidTongZhiName\" TEXT," + // 2: CidTongZhiName
                "\"Ism\" TEXT," + // 3: ism
                "\"FileNameList\" TEXT," + // 4: fileNameList
                "\"UrlList\" TEXT);"); // 5: urlList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XIAO_XI_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, XiaoXiDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String CidTongZhiName = entity.getCidTongZhiName();
        if (CidTongZhiName != null) {
            stmt.bindString(3, CidTongZhiName);
        }
 
        String ism = entity.getIsm();
        if (ism != null) {
            stmt.bindString(4, ism);
        }
 
        String fileNameList = entity.getFileNameList();
        if (fileNameList != null) {
            stmt.bindString(5, fileNameList);
        }
 
        String urlList = entity.getUrlList();
        if (urlList != null) {
            stmt.bindString(6, urlList);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, XiaoXiDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String CidTongZhiName = entity.getCidTongZhiName();
        if (CidTongZhiName != null) {
            stmt.bindString(3, CidTongZhiName);
        }
 
        String ism = entity.getIsm();
        if (ism != null) {
            stmt.bindString(4, ism);
        }
 
        String fileNameList = entity.getFileNameList();
        if (fileNameList != null) {
            stmt.bindString(5, fileNameList);
        }
 
        String urlList = entity.getUrlList();
        if (urlList != null) {
            stmt.bindString(6, urlList);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public XiaoXiDaoBean readEntity(Cursor cursor, int offset) {
        XiaoXiDaoBean entity = new XiaoXiDaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CidTongZhiName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ism
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileNameList
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // urlList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XiaoXiDaoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCidTongZhiName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsm(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileNameList(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrlList(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(XiaoXiDaoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(XiaoXiDaoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(XiaoXiDaoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
